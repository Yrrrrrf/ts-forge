// src/schema/gen-types.ts
import { mapPgTypeToTs } from '../tools/type-maps';
import { removeDir, ensureDir, writeFiles } from '../tools/fs-ops';

export interface ColumnMetadata {
  name: string;
  type: string;
  nullable: boolean;
  is_primary_key: boolean;
  is_foreign_key: boolean;
  references?: {
    schema: string;
    table: string;
    column: string;
  };
}

export interface TableMetadata {
  name: string;
  schema: string;
  columns: ColumnMetadata[];
}

export interface SchemaMetadata {
  name: string;
  tables: Record<string, TableMetadata>;
  // views: Record<string, ApiViewMetadata>;
  // functions: Record<string, ApiFunctionMetadata>;
}

// todo: Make this some more useful... Because I think that I can also create some
// export interface GeneratedTypes {
// 	tables: Record<string, string>;
// 	views: Record<string, string>;
// 	functions: Record<string, string>;
// 	params: Record<string, string>;
// }

export async function generateTypes(metadata: SchemaMetadata[]): Promise<void> {  
    await ensureDir('src/gen');
    
    const fileOps = [];

    // Generate individual schema files
    metadata.forEach(schema => {
        if (schema) {
            const types = Object.values(schema.tables).map(table => {
                const properties = table.columns.map(column => {
                    const tsType = mapPgTypeToTs(column.type);
                    const optional = column.is_primary_key ? '' : '?';
                    return `\t${column.name}${optional}: ${tsType};`;
                });
                return `export interface ${table.name} {\n${properties.join('\n')}\n}`;
            }).join('\n\n');
            fileOps.push({ path: `src/gen/types-${schema.name}.ts`, content: types });
        }
    });

    const indexContent = ['// * Generated by ts-forge',
        '\n// Import schema types',
        ...metadata.map(schema => `import * as _${schema.name} from './types-${schema.name}';`),
        '\n// Export all schema types',
        ...metadata.map(schema => `export * from './types-${schema.name}';`),
        '\n// Create schemas object',
        'export const schemas = {',
        metadata.map(schema => `\t${schema.name}: _${schema.name}`).join(',\n'),
        '} as const;',
        '\n// Export type helpers',
        'export type SchemaNames = keyof typeof schemas;',
        'export type SchemaType<T extends SchemaNames> = typeof schemas[T];',
        ''
    ].join('\n');
    fileOps.push({ path: 'src/gen/index.ts', content: indexContent });

    await writeFiles(fileOps);
}