// src/schema/gen-types.ts
import { baseClient } from '../client/base';
import { mapPgTypeToTs } from '../tools/type-maps';
import fs from 'fs/promises';
import path from 'path';

export interface ApiColumnMetadata {
  name: string;
  type: string;
  is_primary_key: boolean;
  is_foreign_key: boolean;
}

export interface ApiTableMetadata {
  name: string;
  columns: ApiColumnMetadata[];
}

export interface ApiSchemaMetadata {
  name: string;
  tables: Record<string, ApiTableMetadata>;
}

/**
 * Fetch schema metadata from API
 */
export async function fetchSchemaMetadata(): Promise<ApiSchemaMetadata[]> {
    return await baseClient.get<ApiSchemaMetadata[]>('/dt/schemas');
}


export function generateInterface(table: ApiTableMetadata): string {
  const properties = table.columns.map(column => {
      const tsType = mapPgTypeToTs(column.type);
      const optional = column.is_primary_key ? '' : '?';
      return `  ${column.name}${optional}: ${tsType};`;
  });

  return `export interface ${table.name} {\n${properties.join('\n')}\n}`;
}

export function generateIndexContent(schemas: string[]): string {
  return [
    '// * Generated by ts-forge\n',
    '// Import schema types',
    ...schemas.map(schema => `import * as _${schema} from './types-${schema}';`),
    '\n// Export all schema types',
    ...schemas.map(schema => `export * from './types-${schema}';`),
    '\n// Create schemas object',
    'export const schemas = {',
    schemas.map(schema => `  ${schema}: _${schema}`).join(',\n'),  // Remove spread operator here
    '} as const;',
    '\n// Export type helpers',
    'export type SchemaNames = keyof typeof schemas;',
    'export type SchemaType<T extends SchemaNames> = typeof schemas[T];',
    ''
  ].join('\n');
}

export async function generateTypes(schemas: string[]): Promise<void> {
  const schemaMetadata = await fetchSchemaMetadata();
  
  // Generate individual schema files
  await Promise.all(schemas.map(async schema => {
      const schemaData = schemaMetadata.find(s => s.name === schema);
      if (schemaData) {
          let tables = Object.values(schemaData.tables);
          let types = tables.map(generateInterface).join('\n\n');
          
          await fs.mkdir('src/gen', { recursive: true });
          await fs.writeFile(`src/gen/types-${schema}.ts`, types);
      }
  }));

  // Generate index.ts
  const indexContent = generateIndexContent(schemas);
  await fs.writeFile('src/gen/index.ts', indexContent);
}